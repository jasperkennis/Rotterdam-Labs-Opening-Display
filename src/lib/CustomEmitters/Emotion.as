package lib.CustomEmitters{	import flash.geom.Point;	import org.flintparticles.common.counters.Blast;	import org.flintparticles.common.displayObjects.Dot;	import org.flintparticles.common.displayObjects.Rect;	import org.flintparticles.common.initializers.*;	import org.flintparticles.twoD.actions.*;	import org.flintparticles.twoD.emitters.Emitter2D;	import org.flintparticles.twoD.initializers.*;	import org.flintparticles.twoD.zones.*;	import fl.transitions.Rotate;	import org.flintparticles.threeD.initializers.RotateVelocity;	/**	 * Creates one single particle with a predefined	 * behaivoir and a varialbe color, shape and size	 * when start is called.	 *	 * @author Frank Bos and Jasper Kennis	 */	public class Emotion extends Emitter2D	{		private var _imgClass:ImageClass;		private var _zone:RectangleZone;		private var _position:Position;		private var _zone2:PointZone;		private var _velocity:Velocity;		private var _dzone:RectangleZone;		private var _deathZone:DeathZone;		private var _scaleImage:ScaleImageInit;		private var _emotions:Array;		private var _boundingBox:BoundingBox;		public function Emotion()		{			// Populate the emotion array.			// Sad, Angry, Supprised, Happy			_emotions = new Array(			  new uint(0x57a3a0),			  new uint(0xe70414),			  new uint(0xefd42e),			  new uint(0xe82e9d)			  );			// Add a counter to the emitter, which tells the emitter			// how many particles should be emitted every second. A			// steady counter continues to create particles.			counter = new Blast(1);			// Create a zone where the particles are created, and a			// spawning area.			updateSizes(500,400);			// Create a direction in which particles will move.			addInitializer( new Velocity( new DiscZone( new Point( 0, 0 ), 100, 100 ) ) );			// Add the move and drift action to the emitter.			addAction( new Move() );			addAction( new RandomDrift( 15, 15 ) );			addAction(new org.flintparticles.twoD.actions.Rotate() );		}		/**		 * A custom start method that applies desireable changes		 * to the display object before creating it.		 */		public function extendedStart(age:int, sex:int, emotion:int):void		{			// Remove old _imgClass and add the new one			removeInitializer( _imgClass );			if (! sex) // Female (round)			{				_imgClass = new ImageClass(Dot,[(age*.1), _emotions[emotion]]);				addInitializer( _imgClass );			}			else			{// Male (square)				_imgClass = new ImageClass(Rect,[(age*.2),(age*.2), _emotions[emotion]]);				addInitializer( _imgClass );				addInitializer( new RotateVelocity(0 , 2 ) );			}			super.start();		}		/**		 * Update the sizes after the stage has been resized		 */		public function updateSizes(width:int, height:int):void		{			// Remove old size settings.			removeAction( _boundingBox );			removeInitializer( _position );			// Add new bounding box.			_boundingBox = new BoundingBox(0,0,width,height);			addAction( _boundingBox );			// Add new spawning area.			_zone = new RectangleZone(0,0,width,height);			_position = new Position(_zone);			addInitializer( _position );		}	}}