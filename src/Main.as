package {	import flash.display.Sprite;	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.geom.Point;	import org.flintparticles.common.counters.*;	import org.flintparticles.common.displayObjects.RadialDot;	import org.flintparticles.common.initializers.*;	import org.flintparticles.twoD.actions.*;	import org.flintparticles.twoD.emitters.Emitter2D;	import org.flintparticles.twoD.initializers.*;	import org.flintparticles.twoD.renderers.*;	import org.flintparticles.twoD.zones.*;	import lib.CustomEmitters.Emotion;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import lib.CustomEmitters.EmotionalWord;	[SWF(width='500', height='300', frameRate='30', backgroundColor='#ffffff')]	/**	 * Shows particles that represent emotions. Uses	 * output from a shore emotion abstractor.	 *	 * Emotions:	 * 0: Sad	 * 1: Angry	 * 2: Supprised	 * 3: Happy	 * 	 * Sex:	 * 0: Female	 * 1: Male	 *	 * @author Frank Bos and Jasper Kennis	 */	public class Main extends Sprite	{		private var _startEmitter:Emotion;		private var _wordEmitter:EmotionalWord;		private var _oldWordEmitter:EmotionalWord;				private var renderer:DisplayObjectRenderer;				private var _countDown:Array;		public function Main():void		{			_countDown = new Array(10,9,8,7,6,5,4,3,2,1,0,"Welkom!");			addEventListener(Event.ADDED_TO_STAGE, ready);		}						private function ready(e:Event):void		{						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						// Create a Snowfall _startEmitter.			_startEmitter = new Emotion(stage);			// Create a renderer (which renders the created			// particles), and add the _startEmitter to the renderer.			renderer = new DisplayObjectRenderer();			renderer.addEmitter( _startEmitter );			addChild( renderer );			// Set listeners if the stage is ready.			if (stage)			{				stage.addEventListener( KeyboardEvent.KEY_UP, keyUpListener );				stage.addEventListener( Event.RESIZE, resizeListener );			}		}		/**		* Respond to key input.		* @return void		*/		private function keyUpListener(e:KeyboardEvent):void		{			switch(e.keyCode)			{				case 65:				if (stage.displayState == "normal")				{					stage.displayState = StageDisplayState.FULL_SCREEN;				}				break;								case 83:				startWordLoop();				break;								default:				_startEmitter.extendedStart(				  randomNumber(18,70),				  randomNumber(0,1),				  randomNumber(0,3)				 );				break;			}		}		/**		 * Update the stage dependend sizes of the _startEmitter.		 * @return void		 */		private function resizeListener(e:Event):void		{			_startEmitter.updateSizes( stage.stageWidth , stage.stageHeight );		}		/** 		* Generates a truly "random" number		* @return Number		*/		private function randomNumber(low:Number=0, high:Number=1):Number		{			return Math.floor(Math.random() * (1+high-low)) + low;		}								/**		*/		private function startWordLoop():void		{			_wordEmitter = new EmotionalWord(stage,_startEmitter.particles);			renderer.removeEmitter(_startEmitter);						renderer.addEmitter(_wordEmitter);			//_wordEmitter.start();		}	}}