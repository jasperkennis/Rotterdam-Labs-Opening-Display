/* * SLEKX OPEN SOURCE SOFTWARE * ........................................ *  * Author: Ryan Hodson * Copyright (c) Ryan Hodson 2009-2010 * http://slekx.com/ *  * Licence Agreement *  * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files * (the "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be included * in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package {	import flash.system.System;	import flash.display.*;	import flash.geom.*;	import flash.text.*;	import flash.events.*;	import flash.filters.*;	import flash.utils.getDefinitionByName;	import org.flintparticles.common.counters.*;	import org.flintparticles.common.displayObjects.*;	import org.flintparticles.common.actions.*;	import org.flintparticles.common.initializers.*;	import org.flintparticles.common.events.*;	import org.flintparticles.common.energyEasing.*;	import org.flintparticles.twoD.particles.Particle2D;	import org.flintparticles.twoD.actions.*;	import org.flintparticles.twoD.emitters.Emitter2D;	import org.flintparticles.twoD.initializers.*;	import org.flintparticles.twoD.renderers.*;	import org.flintparticles.twoD.zones.*;	import caurina.transitions.Tweener;	public class FlintTweenToZoneDemo extends Sprite	{		static public const TEXT_1:String = "Hello";		static public const TEXT_2:String = "World!";		public var startEmitter:Emitter2D;		public var tween1Emitter:Emitter2D;		public var tween2Emitter:Emitter2D;		public var renderer:BitmapRenderer;		public var output_txt:TextField;		public var screenshot:DisplayObject;		public var bitmapData1:BitmapData;		public var bitmapData2:BitmapData;		public function FlintTweenToZoneDemo()		{			init();		}		//----- Particle System Setup -----		private function startEngine():void		{			// initialize engine			createZones();			startEmitter = new Emitter2D();			tween1Emitter = new Emitter2D();			tween2Emitter = new Emitter2D();			renderer = new PixelRenderer(new Rectangle(0,0,300,200));			addChild(renderer);			renderer.addEmitter(startEmitter);			renderer.addEmitter(tween1Emitter);			renderer.addEmitter(tween2Emitter);			renderer.addFilter(new BlurFilter(2, 2, 1));			renderer.addFilter( new ColorMatrixFilter( [			1,0,0,0,0,			0,1,0,0,0,			0,0,1,0,0,			0,0,0,.90,0 ] ) );			// set up startEmitter			startEmitter.counter = new Blast(750);			// define appearance of particles			startEmitter.addInitializer(			new Position(new BitmapDataZone(bitmapData1))			);			var colors:Array = [			   0xFFFFFF00,			0xFFCC9900,			   ];			startEmitter.addInitializer(new ColorsInit(colors));			// add initializers;			startEmitter.addInitializer(new Lifetime(4));			tween1Emitter.addInitializer(new Lifetime(4));			tween2Emitter.addInitializer(new Lifetime(4));			// add actions;			var easing:Function = Cubic.easeInOut;			startEmitter.addAction(new Age(easing));			tween1Emitter.addAction(new Age(easing));			tween2Emitter.addAction(new Age(easing));			startEmitter.addAction(			new TweenToZone(new BitmapDataZone(bitmapData2))			);			tween1Emitter.addAction(			new TweenToZone(new BitmapDataZone(bitmapData1))			);			tween2Emitter.addAction(			new TweenToZone(new BitmapDataZone(bitmapData2))			);			startEmitter.addEventListener(ParticleEvent.PARTICLE_DEAD,			  moveToTween1);			tween1Emitter.addEventListener(ParticleEvent.PARTICLE_DEAD,			  moveToTween2);			tween2Emitter.addEventListener(ParticleEvent.PARTICLE_DEAD,			  moveToTween1);			// start engine			startEmitter.start();			tween1Emitter.start();			tween2Emitter.start();		}		private function stopEngine():void		{			if (! startEmitter)			{				return;			}			// free up resources			graphics.clear();			bitmapData1.dispose();			bitmapData2.dispose();			startEmitter.removeEventListener(ParticleEvent.PARTICLE_DEAD,			  moveToTween1);			tween1Emitter.removeEventListener(ParticleEvent.PARTICLE_DEAD,			  moveToTween2);			tween2Emitter.removeEventListener(ParticleEvent.PARTICLE_DEAD,			  moveToTween1);			startEmitter.stop();			startEmitter.killAllParticles();			startEmitter = null;			tween1Emitter.stop();			tween1Emitter.killAllParticles();			tween1Emitter = null;			tween2Emitter.stop();			tween2Emitter.killAllParticles();			tween2Emitter = null;			removeChild(renderer);			renderer = null;			System.gc();		}		private function moveToTween1(_event:ParticleEvent):void		{			var dyingParticle:Particle2D = _event.particle as Particle2D;			var newParticle:Particle2D = tween1Emitter.particleFactory.createParticle() as Particle2D;			newParticle.x = dyingParticle.x;			newParticle.y = dyingParticle.y;			newParticle.color = dyingParticle.color;			tween1Emitter.addExistingParticles( [ newParticle ], true );		}		private function moveToTween2(_event:ParticleEvent):void		{			var dyingParticle:Particle2D = _event.particle as Particle2D;			var newParticle:Particle2D = tween2Emitter.particleFactory.createParticle() as Particle2D;			newParticle.x = dyingParticle.x;			newParticle.y = dyingParticle.y;			newParticle.color = dyingParticle.color;			tween2Emitter.addExistingParticles( [ newParticle ], true );		}		private function createZones():void		{			bitmapData1 = new BitmapData(300,200,true,0x00FFFFFF);			bitmapData2 = new BitmapData(300,200,true,0x00FFFFFF);			var txt:TextField = new TextField();			txt.autoSize = TextFieldAutoSize.LEFT;			var tf:TextFormat = new TextFormat();			tf.font = "Courier New";			tf.bold = true;			tf.size = 60;			tf.color = 0x000000;			txt.defaultTextFormat = tf;			txt.text = TEXT_1;			txt.x = 150 - txt.width / 2;			txt.y = 20;			bitmapData1.draw(txt, txt.transform.matrix);			txt.text = TEXT_2;			txt.x = 150 - txt.width / 2;			txt.y = 100;			bitmapData2.draw(txt, txt.transform.matrix);		}		//----- User Interface Setup -----		private function init():void		{			output_txt = new TextField();			var tf:TextFormat = new TextFormat();			tf.font = "Verdana";			tf.size = 18;			tf.color = 0x999999;			output_txt.defaultTextFormat = tf;			output_txt.autoSize = TextFieldAutoSize.LEFT;			output_txt.text = "( Roll over to activate )";			output_txt.x = (stage.stageWidth - output_txt.width)/2;			output_txt.y = (stage.stageHeight - output_txt.height)/2;			try			{				var classDef:Object = getDefinitionByName("Screenshot");				screenshot = new classDef() as DisplayObject;			}			catch (e:Error)			{				// screenshot could not be found, fail silently			}			showScreenshot();			addChild(output_txt);			stage.addEventListener(Event.MOUSE_LEAVE, mouseLeaveHandler);			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);		}		private function mouseMoveHandler(_event:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);			startEngine();			removeOutputText();			removeScreenshot();		}		private function mouseLeaveHandler(_event:Event):void		{			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);			stopEngine();			showScreenshot();			showOutputText();		}		private function removeOutputText():void		{			if (output_txt.parent)			{				removeChild(output_txt);			}		}		private function showOutputText():void		{			if (! output_txt.parent)			{				addChild(output_txt);			}		}		private function showScreenshot():void		{			if (screenshot)			{				if (! screenshot.parent)				{					addChild(screenshot);				}			}		}		private function removeScreenshot():void		{			if (screenshot)			{				if (screenshot.parent)				{					removeChild(screenshot);				}			}		}	}}